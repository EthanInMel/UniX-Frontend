{
  "language": "Solidity",
  "sources": {
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "contracts/unix/interface/IAaveV3Pool.sol": {
      "content": "pragma solidity ^0.8.24;\nimport '../library/DataTypes.sol';\n\ninterface IAaveV3Pool {\n\tfunction supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n}"
    },
    "contracts/unix/interface/IAaveV3RewardController.sol": {
      "content": "pragma solidity ^0.8.24;\ninterface IAaveV3RewardController {\n\tfunction getRewardsByAsset(address asset) external view returns (address[] memory);\n\tfunction getAllUserRewards(address[] calldata assets,address user) external view returns (address[] memory rewardsList, uint256[] memory unclaimedAmounts);\n\t// function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\tfunction claimRewards(address[] calldata assets,uint256 amount,address to,address reward) external returns (uint256);\n}"
    },
    "contracts/unix/interface/IERC20.sol": {
      "content": "pragma solidity ^0.8.24;\ninterface IERC20 {\n    function approve(address spender, uint value) external returns (bool);\n    function balanceOf(address owner) external view returns (uint);\n}"
    },
    "contracts/unix/interface/IUniswapV2Pair.sol": {
      "content": "pragma solidity ^0.8.24;\ninterface IUniswapV2Pair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function balanceOf(address account) external view returns (uint);\n    function totalSupply() external view  returns (uint);\n}"
    },
    "contracts/unix/interface/IWETH.sol": {
      "content": "pragma solidity ^0.8.24;\n\ninterface IWETH {\n\tfunction deposit() external payable;\n    function withdraw(uint wad) external;\n}"
    },
    "contracts/unix/interface/IWrappedTokenGatewayV3.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.24;\n\ninterface IWrappedTokenGatewayV3 {\n  function depositETH(address pool, address onBehalfOf, uint16 referralCode) external payable;\n\n  function withdrawETH(address pool, uint256 amount, address onBehalfOf) external;\n\n  function getWETHAddress() external view returns (address);\n\n  // function repayETH(\n  //   address pool,\n  //   uint256 amount,\n  //   uint256 rateMode,\n  //   address onBehalfOf\n  // ) external payable;\n\n  // function borrowETH(\n  //   address pool,\n  //   uint256 amount,\n  //   uint256 interestRateMode,\n  //   uint16 referralCode\n  // ) external;\n\n  // function withdrawETHWithPermit(\n  //   address pool,\n  //   uint256 amount,\n  //   address to,\n  //   uint256 deadline,\n  //   uint8 permitV,\n  //   bytes32 permitR,\n  //   bytes32 permitS\n  // ) external;\n}"
    },
    "contracts/unix/library/DataTypes.sol": {
      "content": "pragma solidity ^0.8.24;\n\nlibrary DataTypes {\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    //timestamp of last update\n    uint40 lastUpdateTimestamp;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint16 id;\n    //aToken address\n    address aTokenAddress;\n    //stableDebtToken address\n    address stableDebtTokenAddress;\n    //variableDebtToken address\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the current treasury balance, scaled\n    uint128 accruedToTreasury;\n    //the outstanding unbacked aTokens minted through the bridging feature\n    uint128 unbacked;\n    //the outstanding debt borrowed against this asset in isolation mode\n    uint128 isolationModeTotalDebt;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60: asset is paused\n    //bit 61: borrowing in isolation mode is enabled\n    //bit 62: siloed borrowing enabled\n    //bit 63: flashloaning enabled\n    //bit 64-79: reserve factor\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n    //bit 152-167 liquidation protocol fee\n    //bit 168-175 eMode category\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n    //bit 252-255 unused\n\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    /**\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\n     * asset is borrowed by the user.\n     */\n    uint256 data;\n  }\n\n  struct EModeCategory {\n    // each eMode category has a custom ltv and liquidation threshold\n    uint16 ltv;\n    uint16 liquidationThreshold;\n    uint16 liquidationBonus;\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n    address priceSource;\n    string label;\n  }\n\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\n\n  struct ReserveCache {\n    uint256 currScaledVariableDebt;\n    uint256 nextScaledVariableDebt;\n    uint256 currPrincipalStableDebt;\n    uint256 currAvgStableBorrowRate;\n    uint256 currTotalStableDebt;\n    uint256 nextAvgStableBorrowRate;\n    uint256 nextTotalStableDebt;\n    uint256 currLiquidityIndex;\n    uint256 nextLiquidityIndex;\n    uint256 currVariableBorrowIndex;\n    uint256 nextVariableBorrowIndex;\n    uint256 currLiquidityRate;\n    uint256 currVariableBorrowRate;\n    uint256 reserveFactor;\n    ReserveConfigurationMap reserveConfiguration;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    uint40 reserveLastUpdateTimestamp;\n    uint40 stableDebtLastUpdateTimestamp;\n  }\n\n  struct ExecuteLiquidationCallParams {\n    uint256 reservesCount;\n    uint256 debtToCover;\n    address collateralAsset;\n    address debtAsset;\n    address user;\n    bool receiveAToken;\n    address priceOracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteSupplyParams {\n    address asset;\n    uint256 amount;\n    address onBehalfOf;\n    uint16 referralCode;\n  }\n\n  struct ExecuteBorrowParams {\n    address asset;\n    address user;\n    address onBehalfOf;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint16 referralCode;\n    bool releaseUnderlying;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteRepayParams {\n    address asset;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    address onBehalfOf;\n    bool useATokens;\n  }\n\n  struct ExecuteWithdrawParams {\n    address asset;\n    uint256 amount;\n    address to;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ExecuteSetUserEModeParams {\n    uint256 reservesCount;\n    address oracle;\n    uint8 categoryId;\n  }\n\n  struct FinalizeTransferParams {\n    address asset;\n    address from;\n    address to;\n    uint256 amount;\n    uint256 balanceFromBefore;\n    uint256 balanceToBefore;\n    uint256 reservesCount;\n    address oracle;\n    uint8 fromEModeCategory;\n  }\n\n  struct FlashloanParams {\n    address receiverAddress;\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    address onBehalfOf;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address addressesProvider;\n    uint8 userEModeCategory;\n    bool isAuthorizedFlashBorrower;\n  }\n\n  struct FlashloanSimpleParams {\n    address receiverAddress;\n    address asset;\n    uint256 amount;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n  }\n\n  struct FlashLoanRepaymentParams {\n    uint256 amount;\n    uint256 totalPremium;\n    uint256 flashLoanPremiumToProtocol;\n    address asset;\n    address receiverAddress;\n    uint16 referralCode;\n  }\n\n  struct CalculateUserAccountDataParams {\n    UserConfigurationMap userConfig;\n    uint256 reservesCount;\n    address user;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ValidateBorrowParams {\n    ReserveCache reserveCache;\n    UserConfigurationMap userConfig;\n    address asset;\n    address userAddress;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint256 maxStableLoanPercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n    bool isolationModeActive;\n    address isolationModeCollateralAddress;\n    uint256 isolationModeDebtCeiling;\n  }\n\n  struct ValidateLiquidationCallParams {\n    ReserveCache debtReserveCache;\n    uint256 totalDebt;\n    uint256 healthFactor;\n    address priceOracleSentinel;\n  }\n\n  struct CalculateInterestRatesParams {\n    uint256 unbacked;\n    uint256 liquidityAdded;\n    uint256 liquidityTaken;\n    uint256 totalStableDebt;\n    uint256 totalVariableDebt;\n    uint256 averageStableBorrowRate;\n    uint256 reserveFactor;\n    address reserve;\n    address aToken;\n  }\n\n  struct InitReserveParams {\n    address asset;\n    address aTokenAddress;\n    address stableDebtAddress;\n    address variableDebtAddress;\n    address interestRateStrategyAddress;\n    uint16 reservesCount;\n    uint16 maxNumberReserves;\n  }\n}"
    },
    "contracts/unix/library/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @notice Provides functions to perform calculations with Wad and Ray units\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\n * with 27 digits of precision)\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n */\nlibrary WadRayMath {\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\n  uint256 internal constant WAD = 1e18;\n  uint256 internal constant HALF_WAD = 0.5e18;\n\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant HALF_RAY = 0.5e27;\n\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n  /**\n   * @dev Multiplies two wad, rounding half up to the nearest wad\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Wad\n   * @param b Wad\n   * @return c = a*b, in wad\n   */\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\n    assembly {\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, b), HALF_WAD), WAD)\n    }\n  }\n\n  /**\n   * @dev Divides two wad, rounding half up to the nearest wad\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Wad\n   * @param b Wad\n   * @return c = a/b, in wad\n   */\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\n    assembly {\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, WAD), div(b, 2)), b)\n    }\n  }\n\n  /**\n   * @notice Multiplies two ray, rounding half up to the nearest ray\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Ray\n   * @param b Ray\n   * @return c = a raymul b\n   */\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\n    assembly {\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, b), HALF_RAY), RAY)\n    }\n  }\n\n  /**\n   * @notice Divides two ray, rounding half up to the nearest ray\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Ray\n   * @param b Ray\n   * @return c = a raydiv b\n   */\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\n    assembly {\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, RAY), div(b, 2)), b)\n    }\n  }\n\n  /**\n   * @dev Casts ray down to wad\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Ray\n   * @return b = a converted to wad, rounded half up to the nearest wad\n   */\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\n    assembly {\n      b := div(a, WAD_RAY_RATIO)\n      let remainder := mod(a, WAD_RAY_RATIO)\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\n        b := add(b, 1)\n      }\n    }\n  }\n\n  /**\n   * @dev Converts wad up to ray\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Wad\n   * @return b = a converted in ray\n   */\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\n    // to avoid overflow, b/WAD_RAY_RATIO == a\n    assembly {\n      b := mul(a, WAD_RAY_RATIO)\n\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\n        revert(0, 0)\n      }\n    }\n  }\n}"
    },
    "contracts/unix/UniXBank.sol": {
      "content": "pragma solidity ^0.8.24;\n\nimport '@uniswap/lib/contracts/libraries/TransferHelper.sol';\nimport './interface/IUniswapV2Pair.sol';\nimport './interface/IAaveV3Pool.sol';\nimport './interface/IERC20.sol';\nimport './library/DataTypes.sol';\nimport './interface/IWrappedTokenGatewayV3.sol';\nimport './interface/IWETH.sol';\nimport './interface/IAaveV3RewardController.sol';\nimport './library/WadRayMath.sol';\n\ncontract UniXBank {\n\tusing WadRayMath for uint;\n\tbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n\taddress public immutable aaveV3Pool;\n\taddress public immutable wETH;\n\taddress public immutable ethGateway;\n\taddress public immutable aaveRewardController;\n\n\tstruct PairBalance {\n\t\tuint balance0;\n\t\tuint balance1;\n\t}\n\n\tstruct UserInfo {\n\t\tuint lastTimestamp;\n\t\tuint amount;\n\t\tuint share;\n\t\tuint accInterest;\n\t\tmapping(address => uint) accRewards; // rewardToken => accReward\n\t}\n\n\tstruct PoolInfo {\n\t\taddress aToken;\n\t\tuint lastTimestamp;\n\t\tuint amount;\n\t\tuint share;\n\t\tuint accInterest;\n\t\tmapping(address => uint) accRewards; // rewardToken => accReward\n\t\tmapping(address => UserInfo) userInfo; // user => UserInfo\n\t}\n\n\n\n\tmapping(address => PairBalance) private pairReserve;\n\tmapping (address => uint) reserves;  // token => reserve\n\tmapping(address => bool) public supportEarnTokens;\n\tmapping(address => PoolInfo) pools;\n\n\tconstructor(address _aaveV3Pool,address _wETh, address _ethGateway,address _aaveRewardController,address[] memory _supportEarnTokens) {\n\t\taaveV3Pool = _aaveV3Pool;\n\t\twETH = _wETh;\n\t\tethGateway = _ethGateway;\n\t\taaveRewardController = _aaveRewardController;\n\t\tfor(uint i = 0; i < _supportEarnTokens.length; i++){\n\t\t\tsupportEarnTokens[_supportEarnTokens[i]] = true;\n\t\t\tpools[_supportEarnTokens[i]].aToken = IAaveV3Pool(aaveV3Pool).getReserveData(_supportEarnTokens[i]).aTokenAddress;\n\t\t}\n\t}\n\n\treceive() external payable {\n\n\t}\n\n\tfunction getPairBanlance(address pair) external view returns(uint balance0,uint balance1) {\n\t\tPairBalance memory pb = pairReserve[pair];\n\t\tbalance0 = pb.balance0;\n\t\tbalance1 = pb.balance1;\n\t}\n\n\n\tfunction onMint(address user,address pair,uint amount0, uint amount1) external returns(uint balance0,uint balance1) {\n\t\trequire(msg.sender == pair,\"invalid caller\");\n\t\tPairBalance storage pb = pairReserve[pair];\n\t\tpb.balance0 = pb.balance0 + amount0;\n\t\tpb.balance1 = pb.balance1 + amount1;\n\t\tbalance0 = pb.balance0;\n\t\tbalance1 = pb.balance1;\n\t\taddress token0 = IUniswapV2Pair(pair).token0();\n\t\taddress token1 = IUniswapV2Pair(pair).token1();\n\t\t_aaveV3Supply(token0, amount0);\n\t\t_aaveV3Supply(token1, amount1);\n\t\t_updateShare(user, token0, amount0);\n\t\t_updateShare(user, token1, amount1);\n\t}\n\n\tfunction onBurn(address user,address pair, uint amount0, uint amount1) external {\n\t\tPairBalance storage pb = pairReserve[pair];\n\t\tIUniswapV2Pair iPair = IUniswapV2Pair(pair);\n\t\taddress token0 = iPair.token0();\n\t\taddress token1 = iPair.token1();\n\t\t_onBurn(user, pair, token0, amount0, pb.balance0);\t\n\t\t_onBurn(user, pair, token1, amount1, pb.balance1);\t\n\t}\n\n\tfunction _onBurn(address user,address pair, address token,uint amount, uint reserve) internal {\n\t\tif(supportEarnTokens[token]){\n\t\t\t_claimReward(user, token);\n\t\t\t_claimedInterest(token, user);\n\t\t\tPoolInfo storage poolInfo = pools[token];\n\t\t\tuint removedShare = amount * poolInfo.userInfo[user].share / reserve;\n\t\t\tpoolInfo.share -= removedShare;\n\t\t\tpoolInfo.userInfo[user].share -= removedShare;\n\t\t\t_safeTransferTo(pair, token, user, amount);\n\n\t\t\taddress[] memory assets = new address[](1);\n\t\t\tassets[0] = poolInfo.aToken;\n\t\t\tIAaveV3RewardController arc = IAaveV3RewardController(aaveRewardController);\n\t\t\t(address[] memory rewardsList,) = arc.getAllUserRewards(assets, address(this));\n\t\t\tfor(uint i = 0; i < rewardsList.length; i++){\n\t\t\t\tuint changedAccUserReward = poolInfo.userInfo[user].accRewards[rewardsList[i]] * amount / reserve;\n\t\t\t\tpoolInfo.userInfo[user].accRewards[rewardsList[i]] -= changedAccUserReward;\n\t\t\t\tpoolInfo.accRewards[rewardsList[i]] -= changedAccUserReward;\n\t\t\t}\n\n\t\t\tuint changedAccUserInterest = poolInfo.userInfo[user].accInterest * amount / reserve;\n\t\t\tpoolInfo.userInfo[user].accInterest -= changedAccUserInterest;\n\t\t\tpoolInfo.accInterest -= changedAccUserInterest;\n\n\t\t}\n\t}\n\n\tfunction onTransfer(address pair, address from, address to,uint amount) external {\n\t\tPairBalance storage pb = pairReserve[pair];\n\t\tIUniswapV2Pair iPair = IUniswapV2Pair(pair);\n\t\taddress token0 = iPair.token0();\n\t\taddress token1 = iPair.token1();\t\n\t\tuint amount0 = amount * pb.balance0 / iPair.totalSupply();\n\t\tuint amount1 = amount * pb.balance1 / iPair.totalSupply();\n\t\t_onTransfer(token0, from, to, amount0, pb.balance0);\n\t\t_onTransfer(token1, from, to, amount1, pb.balance1);\n\n\t}\n\n\tfunction _onTransfer(address token,address from, address to, uint amount, uint reserve) internal {\n\t\tif(supportEarnTokens[token]){\n\t\t\t_claimReward(from, token);\n\t\t\t// _claimReward(to, token);\n\t\t\t_claimedInterest(token,from);\n\t\t\tPoolInfo storage poolInfo = pools[token];\n\t\t\tuint changeShare = amount * poolInfo.userInfo[from].share / reserve;\n\t\t\tuint changeAmount = amount * poolInfo.userInfo[from].amount / reserve;\n\t\t\tpoolInfo.userInfo[from].share -= changeShare;\n\t\t\tpoolInfo.userInfo[from].amount -= changeAmount;\n\n\t\t\tpoolInfo.userInfo[to].share += changeShare;\n\t\t\tpoolInfo.userInfo[to].amount += changeAmount;\n\n\t\t\taddress[] memory assets = new address[](1);\n\t\t\tassets[0] = poolInfo.aToken;\n\t\t\tIAaveV3RewardController arc = IAaveV3RewardController(aaveRewardController);\n\t\t\t(address[] memory rewardsList,) = arc.getAllUserRewards(assets, address(this));\n\t\t\tfor(uint i = 0; i < rewardsList.length; i++){\n\t\t\t\tuint changedAccUserReward = poolInfo.userInfo[from].accRewards[rewardsList[i]] * amount / reserve;\n\t\t\t\tpoolInfo.userInfo[from].accRewards[rewardsList[i]] -= changedAccUserReward;\n\t\t\t\tpoolInfo.userInfo[to].accRewards[rewardsList[i]] += changedAccUserReward;\n\t\t\t}\n\n\t\t\tuint changedAccUserInterest = poolInfo.userInfo[from].accInterest * amount / reserve;\n\t\t\tpoolInfo.userInfo[from].accInterest -= changedAccUserInterest;\n\t\t\tpoolInfo.userInfo[to].accInterest += changedAccUserInterest;\n\n\t\t}\n\t}\n\n\n\tfunction safeTransferTo(address pair,address token, address to, uint value) external {\n\t\trequire(msg.sender == pair,\"invalid caller\");\n\t\t_safeTransferTo(pair, token, to, value);\n\t}\n\n\tfunction _safeTransferTo(address pair,address token, address to, uint value) internal{\n\t\tuint balance = IERC20(token).balanceOf(address(this));\n\t\tif(value > balance){\n\t\t\t_aaveV3Withdraw(token, value - balance,false);\n\t\t}\n\t\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\n\t\tPairBalance storage pb = pairReserve[pair];\n\t\tif(IUniswapV2Pair(pair).token0() == token){\n\t\t\tpb.balance0 = pb.balance0 - value;\n\t\t}else{\n\t\t\tpb.balance1 = pb.balance1 - value;\n\t\t}\n\t}\n\n\tfunction safeTransferFrom(address pair,address token, address from,uint value) external {\n\t\tTransferHelper.safeTransferFrom(\n            token, from, address(this), value\n        );\n\t\t_aaveV3Supply(token, value);\n\t\tPairBalance storage pb = pairReserve[pair];\n\t\tif(IUniswapV2Pair(pair).token0() == token){\n\t\t\tpb.balance0 = pb.balance0 + value;\n\t\t}else{\n\t\t\tpb.balance1 = pb.balance1 + value;\n\t\t}\n\t}\n\n\tfunction claimReward(address user,address token) external {\n\t\t_claimReward(user, token);\n\t}\n\n\tfunction _claimReward(address user,address token) internal {\n\t\tif(supportEarnTokens[token]){\n\t\t\t_updateShare(user, token, 0);\n\t\t\tPoolInfo storage poolInfo = pools[token];\n\t\t\taddress[] memory assets = new address[](1);\n\t\t\tassets[0] = poolInfo.aToken;\n\t\t\tIAaveV3RewardController arc = IAaveV3RewardController(aaveRewardController);\n\t\t\t(address[] memory rewardsList, uint256[] memory unclaimedAmounts) = arc.getAllUserRewards(assets, address(this));\n\t\t\tfor(uint i = 0; i < rewardsList.length; i++){\n\t\t\t\tuint rewardAmount = (poolInfo.accRewards[rewardsList[i]] + unclaimedAmounts[i]) * poolInfo.userInfo[user].share / poolInfo.share - poolInfo.userInfo[user].accRewards[rewardsList[i]];\n\t\t\t\tarc.claimRewards(assets, rewardAmount, user, rewardsList[i]);\n\t\t\t\tpoolInfo.accRewards[rewardsList[i]] += rewardAmount;\n\t\t\t\tpoolInfo.userInfo[user].accRewards[rewardsList[i]] += rewardAmount;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _updateShare(address user,address token, uint amount) internal {\n\t\tif(supportEarnTokens[token]){\n\t\t\tPoolInfo storage poolInfo = pools[token];\n\t\t\tuint timestamp = block.timestamp;\n\t\t\tif(poolInfo.lastTimestamp == 0){\n\t\t\t\tpoolInfo.amount = amount;\n\t\t\t\tpoolInfo.lastTimestamp = timestamp;\n\t\t\t\tpoolInfo.userInfo[user].amount = amount;\n\t\t\t\tpoolInfo.userInfo[user].lastTimestamp = timestamp;\n\t\t\t}else{\n\t\t\t\tuint diffTime = timestamp - poolInfo.lastTimestamp;\n\t\t\t\tpoolInfo.share += poolInfo.amount * diffTime;\n\t\t\t\tif(poolInfo.userInfo[user].lastTimestamp > 0){\n\t\t\t\t\tuint userDiffTime = timestamp - poolInfo.userInfo[user].lastTimestamp;\n\t\t\t\t\tpoolInfo.userInfo[user].share += poolInfo.userInfo[user].amount * userDiffTime;\n\t\t\t\t}\n\t\t\t\tpoolInfo.amount += amount;\n\t\t\t\tpoolInfo.userInfo[user].amount += amount;\n\t\t\t\tpoolInfo.userInfo[user].lastTimestamp = timestamp;\n\t\t\t\tpoolInfo.lastTimestamp = timestamp;\n\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _aaveV3Supply(address token,uint amount) internal {\n\t\tif(supportEarnTokens[token]){\n\t\t\tif(token == wETH) {\n\t\t\t\tIWETH(wETH).withdraw(amount);\n\t\t\t\tIWrappedTokenGatewayV3(ethGateway).depositETH{value:amount}(aaveV3Pool, address(this), 0);\n\t\t\t}else {\n\t\t\t\tIERC20(token).approve(aaveV3Pool, amount);\n\t\t\t\tIAaveV3Pool(aaveV3Pool).supply(token, amount, address(this), 0);\n\t\t\t}\n\t\t\treserves[token] += amount;\n\t\t}\n\t}\n\n\n\tfunction _aaveV3Withdraw(address token, uint amount,bool isClaimInterest) internal {\n\t\tif(supportEarnTokens[token]){\n\t\t\tif(token == wETH) {\n\t\t\t\tIWrappedTokenGatewayV3 tokenGateway = IWrappedTokenGatewayV3(ethGateway);\n\t\t\t\taddress aaveWETH = tokenGateway.getWETHAddress();\n\t\t\t\taddress aWETH = IAaveV3Pool(aaveV3Pool).getReserveData(aaveWETH).aTokenAddress;\n\t\t\t\tIERC20(aWETH).approve(ethGateway, amount);\n\t\t\t\ttokenGateway.withdrawETH(aaveV3Pool, amount, address(this));\n\t\t\t\tIWETH(wETH).deposit{value:amount}();\n\t\t\t}else {\n\t\t\t\tIERC20(token).approve(aaveV3Pool, amount);\n\t\t\t\taddress aToken = IAaveV3Pool(aaveV3Pool).getReserveData(token).aTokenAddress;\n\t\t\t\tIERC20(aToken).approve(aaveV3Pool, amount);\n\t\t\t\tIAaveV3Pool(aaveV3Pool).withdraw(token, amount, address(this));\n\t\t\t}\n\t\t\tif(!isClaimInterest){\n\t\t\t\treserves[token] -= amount;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _getPrincipalAndInterest(address token) internal view returns(uint principalAndInterest){\n\t\tprincipalAndInterest = IERC20(pools[token].aToken).balanceOf(address(this));\n\t}\n\n\tfunction _getInterest(address token) internal view returns(uint interest){\n\t\tuint principalAndInterest = _getPrincipalAndInterest(token);\n\t\tinterest = principalAndInterest - reserves[token];\n\t}\n\n\tfunction getInterest(address token) external view  returns(uint interest){\n\t\tinterest = _getInterest(token);\n\t}\n\n\n\tfunction _claimedInterest(address token,address user) internal {\n\t\tuint interest = _getInterest(token);\n\t\t_updateShare(user, token, 0);\n\t\tPoolInfo storage poolInfo = pools[token];\n\t\tuint totalInterest = poolInfo.accInterest + interest;\n\t\tuint claimedInterest = poolInfo.userInfo[user].share * totalInterest / poolInfo.share - poolInfo.userInfo[user].accInterest;\n\t\tif(claimedInterest > 0){\n\t\t\t_aaveV3Withdraw(token, claimedInterest,true);\n\t\t\tTransferHelper.safeTransfer(token, user, claimedInterest);\n\t\t\tpoolInfo.userInfo[user].accInterest += claimedInterest;\n\t\t\tpoolInfo.accInterest += claimedInterest;\n\t\t}\n\t}\n\n\tfunction claimInterest(address user,address token ) external {\n\t\t_claimedInterest(token,user);\n\t}\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}