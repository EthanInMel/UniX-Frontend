{
  "address": "0xa251659517Bb3E71300Bf49Fccbb9D42Cc54a6d7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bank",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9ac260e9e284c29d3d0678f4136753fd3a02473ee9aa0d1b050d0432a777731",
  "receipt": {
    "to": null,
    "from": "0x57955019D11324B477d4D5003FACA2d1af31997a",
    "contractAddress": "0xa251659517Bb3E71300Bf49Fccbb9D42Cc54a6d7",
    "transactionIndex": 0,
    "gasUsed": "2429173",
    "logsBloom": "0x
    "blockHash": "0xd6ca24faf255db6cc70ee4e12b78c91333a88d8fdd3822c2d4e9c3e38be39f69",
    "transactionHash": "0xf9ac260e9e284c29d3d0678f4136753fd3a02473ee9aa0d1b050d0432a777731",
    "logs": [],
    "blockNumber": 20424373,
    "cumulativeGasUsed": "2429173",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57955019D11324B477d4D5003FACA2d1af31997a",
    "0x30f7F03Dc5d672c300309957aE8e9E7bCC4776c0"
  ],
  "numDeployments": 1,
  "solcInputHash": "c6e112466b791766bee55e0cd9aef23e",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/v2-core/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/v2-core/UniswapV2ERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IUniswapV2ERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant name = 'Uniswap V2';\\n    string public constant symbol = 'UNI-V2';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    // function _transfer(address from, address to, uint value) private {\\n    //     balanceOf[from] = balanceOf[from].sub(value);\\n    //     balanceOf[to] = balanceOf[to].add(value);\\n    //     emit Transfer(from, to, value);\\n    // }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    // function transfer(address to, uint value) external returns (bool) {\\n    //     _transfer(msg.sender, to, value);\\n    //     return true;\\n    // }\\n\\n    // function transferFrom(address from, address to, uint value) external returns (bool) {\\n    //     if (allowance[from][msg.sender] != uint(-1)) {\\n    //         allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n    //     }\\n    //     _transfer(from, to, value);\\n    //     return true;\\n    // }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x7e6acc47d6a9b9fc471fbfe68516110f1c1fc78a2783088a0763a21e34791e94\"},\"contracts/v2-core/UniswapV2Factory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IUniswapV2Factory.sol';\\nimport './UniswapV2Pair.sol';\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    address public feeTo;\\n    address public feeToSetter;\\n    address public bank;\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter, address _bank) public {\\n        feeToSetter = _feeToSetter;\\n        bank = _bank;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IUniswapV2Pair(pair).initialize(token0, token1, bank);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0x75bb6a0c266d5bbc8f34da306b88b0ad9e2c2c9ffaabc9110e927783e88c4c16\"},\"contracts/v2-core/UniswapV2Pair.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IUniswapV2Pair.sol';\\nimport './UniswapV2ERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IUniswapV2Factory.sol';\\nimport './interfaces/IUniswapV2Callee.sol';\\n\\ninterface IUniXBank {\\n    function getPairBanlance(address pair) external view returns(uint balance0,uint balance1);\\n    function onMint(address user,address pair,uint amount0, uint amount1) external returns(uint balance0,uint balance1);\\n    function onBurn(address user,address pair, uint amount0, uint amount1) external;\\n    function onTransfer(address pair, address from, address to,uint amount) external;\\n    function safeTransferTo(address pair,address token, address to, uint value) external;\\n}\\n\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n    address public bank;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1, address _bank) external {\\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        bank = _bank;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint _balance0 = IERC20(token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(token1).balanceOf(address(this));\\n\\n        _safeTransfer(token0, bank, _balance0);\\n        _safeTransfer(token1, bank, _balance1);\\n         (uint balance0, uint balance1) = IUniXBank(bank).onMint(to,address(this), _balance0, _balance1);\\n\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        // uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        // uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        (uint balance0, uint balance1) = IUniXBank(bank).getPairBanlance(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n\\n        // _safeTransfer(_token0, to, amount0);\\n        // _safeTransfer(_token1, to, amount1);\\n\\n        // IUniXBank(bank).safeTransferTo(address(this), _token0, to, amount0);\\n        // IUniXBank(bank).safeTransferTo(address(this), _token1, to, amount1);\\n        IUniXBank(bank).onBurn(to, address(this), amount0, amount1);\\n\\n        (balance0, balance1) = IUniXBank(bank).getPairBanlance(address(this));\\n\\n        // balance0 = IERC20(_token0).balanceOf(address(this));\\n        // balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\\n        // if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        // if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n\\n        if (amount0Out > 0) IUniXBank(bank).safeTransferTo(address(this), _token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) IUniXBank(bank).safeTransferTo(address(this), _token1, to, amount1Out); // optimistically transfer tokens\\n        \\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        // balance0 = IERC20(_token0).balanceOf(address(this));\\n        // balance1 = IERC20(_token1).balanceOf(address(this));\\n        (balance0,balance1) = IUniXBank(bank).getPairBanlance(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // we don't have this kind of situation\\n    // force balances to match reserves\\n    // function skim(address to) external lock {\\n    //     address _token0 = token0; // gas savings\\n    //     address _token1 = token1; // gas savings\\n    //     _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n    //     _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    // }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        // _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n\\n        (uint balance0,uint balance1) = IUniXBank(bank).getPairBanlance(address(this));\\n        _update(balance0, balance1, reserve0, reserve1);\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        if(to != address(this)){\\n            IUniXBank(bank).onTransfer(address(this), from, to, value);\\n        }\\n        emit Transfer(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x828d7481b1b31ceefcc76d399d5b218efed29cf0db9ea31253cb059450cd19cb\"},\"contracts/v2-core/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"contracts/v2-core/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"contracts/v2-core/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"contracts/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"contracts/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    // function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, address) external;\\n}\\n\",\"keccak256\":\"0xad32cc1ddb2052c2651f23c7ff955e80cf6928f7a41fd5bde4cb7cad3fa9b944\"},\"contracts/v2-core/libraries/Math.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05927cb4aa14897bd567607522c18d2d518fa803ade6f870fac244c6f3702a3b\"},\"contracts/v2-core/libraries/SafeMath.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x9c8465de751317860b623cd77f7f53f41a84b6624c0580ee526dcf7a2b7cb80c\"},\"contracts/v2-core/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x2240694530251ab376ae468d0a2d3ee8b3109e56f2acadbc203cdf341506dd31\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612a99380380612a998339818101604052604081101561003357600080fd5b508051602090910151600180546001600160a01b039384166001600160a01b03199182161790915560028054939092169216919091179055612a1f8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806376cdb03b1161006657806376cdb03b146100fb578063a2e74af614610103578063c9c653961461012b578063e6a4390514610159578063f46901ed1461018757610093565b8063017e7e5814610098578063094b7415146100bc5780631e3dd18b146100c4578063574f2ba3146100e1575b600080fd5b6100a06101ad565b604080516001600160a01b039092168252519081900360200190f35b6100a06101bc565b6100a0600480360360208110156100da57600080fd5b50356101cb565b6100e96101f2565b60408051918252519081900360200190f35b6100a06101f8565b6101296004803603602081101561011957600080fd5b50356001600160a01b0316610207565b005b6100a06004803603604081101561014157600080fd5b506001600160a01b038135811691602001351661027f565b6100a06004803603604081101561016f57600080fd5b506001600160a01b03813581169160200135166105bb565b6101296004803603602081101561019d57600080fd5b50356001600160a01b03166105e1565b6000546001600160a01b031681565b6001546001600160a01b031681565b600481815481106101d857fe5b6000918252602090912001546001600160a01b0316905081565b60045490565b6002546001600160a01b031681565b6001546001600160a01b0316331461025d576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102e8576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061030b57838561030e565b84845b90925090506001600160a01b03821661036e576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156103e1576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b6060604051806020016103f390610659565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56002546040805163c0c53b8b60e01b81526001600160a01b0388811660048301528781166024830152928316604482015290519297509087169163c0c53b8b9160648082019260009290919082900301818387803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610637576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612384806106678339019056fe60806040526001600d5534801561001557600080fd5b5060405146908060526123328239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561222d806101056000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610520578063d505accf14610528578063dd62ed3e14610579578063fff6cae9146105a7576101a9565b8063ba9a7a56146104d8578063c0c53b8b146104e0578063c45a015514610518576101a9565b80637ecebe00116100d35780637ecebe001461043f57806389afcb441461046557806395d89b41146104a4578063a9059cbb146104ac576101a9565b806370a08231146104095780637464fc3d1461042f57806376cdb03b14610437576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb5780635909c0d5146103d35780635a3d5493146103db5780636a627842146103e3576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105af565b005b610244610b62565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b88565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610bb2565b604080519115158252519081900360200190f35b610339610bc9565b604080516001600160a01b039092168252519081900360200190f35b61035d610bd8565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610bde565b61035d610c78565b6103b5610c9c565b6040805160ff9092168252519081900360200190f35b61035d610ca1565b61035d610ca7565b61035d610cad565b61035d600480360360208110156103f957600080fd5b50356001600160a01b0316610cb3565b61035d6004803603602081101561041f57600080fd5b50356001600160a01b031661108a565b61035d61109c565b6103396110a2565b61035d6004803603602081101561045557600080fd5b50356001600160a01b03166110b1565b61048b6004803603602081101561047b57600080fd5b50356001600160a01b03166110c3565b6040805192835260208301919091528051918290030190f35b6102446113f8565b61031d600480360360408110156104c257600080fd5b506001600160a01b03813516906020013561141a565b61035d611427565b61023a600480360360608110156104f657600080fd5b506001600160a01b03813581169160208101358216916040909101351661142d565b6103396114c2565b6103396114d1565b61023a600480360360e081101561053e57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356114e0565b61035d6004803603604081101561058f57600080fd5b506001600160a01b03813581169160200135166116e2565b61023a6116ff565b600d546001146105fa576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d558415158061060d5750600084115b6106485760405162461bcd60e51b815260040180806020018281038252602581526020018061213f6025913960400191505060405180910390fd5b600080610653610b88565b5091509150816001600160701b0316871080156106785750806001600160701b031686105b6106b35760405162461bcd60e51b81526004018080602001828103825260218152602001806121886021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906106f15750806001600160a01b0316896001600160a01b031614155b61073a576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a156107bc576008546040805163bf4d6b0560e01b81523060048201526001600160a01b0385811660248301528c81166044830152606482018f90529151919092169163bf4d6b0591608480830192600092919082900301818387803b1580156107a357600080fd5b505af11580156107b7573d6000803e3d6000fd5b505050505b891561083e576008546040805163bf4d6b0560e01b81523060048201526001600160a01b0384811660248301528c81166044830152606482018e90529151919092169163bf4d6b0591608480830192600092919082900301818387803b15801561082557600080fd5b505af1158015610839573d6000803e3d6000fd5b505050505b86156108f957886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108e057600080fd5b505af11580156108f4573d6000803e3d6000fd5b505050505b6008546040805163e8929f6f60e01b815230600482015281516001600160a01b039093169263e8929f6f92602480840193919291829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d604081101561096b57600080fd5b508051602090910151909450925060009150506001600160701b0385168a900383116109985760006109a7565b89856001600160701b03160383035b9050600089856001600160701b03160383116109c45760006109d3565b89856001600160701b03160383035b905060008211806109e45750600081115b610a1f5760405162461bcd60e51b81526004018080602001828103825260248152602001806121646024913960400191505060405180910390fd5b6000610a53610a3584600363ffffffff6117fc16565b610a47876103e863ffffffff6117fc16565b9063ffffffff61185f16565b90506000610a6b610a3584600363ffffffff6117fc16565b9050610a9c620f4240610a906001600160701b038b8116908b1663ffffffff6117fc16565b9063ffffffff6117fc16565b610aac838363ffffffff6117fc16565b1015610aee576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610afc848488886118af565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bbf338484611a74565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c63576001600160a01b0384166000908152600260209081526040808320338452909152902054610c3e908363ffffffff61185f16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c6e848484611ad6565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b600a5481565b600b5481565b6000600d54600114610d00576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580610d10610b88565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d6457600080fd5b505afa158015610d78573d6000803e3d6000fd5b505050506040513d6020811015610d8e57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610de157600080fd5b505afa158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b5051600654600854919250610e2d916001600160a01b03918216911684611c22565b600754600854610e4a916001600160a01b03908116911683611c22565b60085460408051630fe04b3360e21b81526001600160a01b038981166004830152306024830152604482018690526064820185905282516000948594921692633f812ccc92608480830193919282900301818787803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b505050506040513d6040811015610ed657600080fd5b50805160209091015190925090506000610eff836001600160701b03891663ffffffff61185f16565b90506000610f1c836001600160701b03891663ffffffff61185f16565b90506000610f2a8989611dbc565b60005490915080610f6757610f536103e8610a47610f4e878763ffffffff6117fc16565b611f1a565b9a50610f6260006103e8611f6c565b610fb6565b610fb36001600160701b038b16610f84868463ffffffff6117fc16565b81610f8b57fe5b046001600160701b038b16610fa6868563ffffffff6117fc16565b81610fad57fe5b04612002565b9a505b60008b11610ff55760405162461bcd60e51b81526004018080602001828103825260288152602001806121d16028913960400191505060405180910390fd5b610fff8c8c611f6c565b61100b86868c8c6118af565b811561103b57600954611037906001600160701b0380821691600160701b90041663ffffffff6117fc16565b600c555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d55509698975050505050505050565b60016020526000908152604090205481565b600c5481565b6008546001600160a01b031681565b60046020526000908152604090205481565b600080600d54600114611111576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611121610b88565b506006546007546008546040805163e8929f6f60e01b815230600482015281519698509496506001600160a01b039384169592841694600094859493169263e8929f6f92602480840193919291829003018186803b15801561118257600080fd5b505afa158015611196573d6000803e3d6000fd5b505050506040513d60408110156111ac57600080fd5b508051602091820151306000908152600190935260408320549194509250906111d58888611dbc565b600054909150806111ec848763ffffffff6117fc16565b816111f357fe5b049a5080611207848663ffffffff6117fc16565b8161120e57fe5b04995060008b118015611221575060008a115b61125c5760405162461bcd60e51b81526004018080602001828103825260288152602001806121a96028913960400191505060405180910390fd5b611266308461201a565b600854604080516311e5803f60e31b81526001600160a01b038f81166004830152306024830152604482018f9052606482018e905291519190921691638f2c01f891608480830192600092919082900301818387803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b50506008546040805163e8929f6f60e01b815230600482015281516001600160a01b03909316945063e8929f6f935060248082019391829003018186803b15801561132657600080fd5b505afa15801561133a573d6000803e3d6000fd5b505050506040513d604081101561135057600080fd5b508051602090910151909550935061136a85858b8b6118af565b811561139a57600954611396906001600160701b0380821691600160701b90041663ffffffff6117fc16565b600c555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610bbf338484611ad6565b6103e881565b6005546001600160a01b03163314611483576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039485166001600160a01b031991821617909155600780549385169382169390931790925560088054919093169116179055565b6005546001600160a01b031681565b6007546001600160a01b031681565b4284101561152a576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611645573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061167b5750886001600160a01b0316816001600160a01b0316145b6116cc576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6116d7898989611a74565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461174a576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d8190556008546040805163e8929f6f60e01b8152306004820152815184936001600160a01b03169263e8929f6f9260248082019391829003018186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d60408110156117c157600080fd5b50805160209091015160095491935091506117f390839083906001600160701b0380821691600160701b9004166118af565b50506001600d55565b60008115806118175750508082028282828161181457fe5b04145b610bc3576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610bc3576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b0384118015906118cd57506001600160701b038311155b611914576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b9004811682039081161580159061194457506001600160701b03841615155b801561195857506001600160701b03831615155b156119c9578063ffffffff1661198685611971866120b8565b6001600160e01b03169063ffffffff6120ca16565b600a80546001600160e01b03929092169290920201905563ffffffff81166119b184611971876120b8565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611aff908263ffffffff61185f16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611b34908263ffffffff6120ef16565b6001600160a01b0383166000818152600160205260409020919091553014611bd25760085460408051630987df0360e01b81523060048201526001600160a01b03868116602483015285811660448301526064820185905291519190921691630987df0391608480830192600092919082900301818387803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b505050505b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611ccf5780518252601f199092019160209182019101611cb0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d31576040519150601f19603f3d011682016040523d82523d6000602084013e611d36565b606091505b5091509150818015611d64575080511580611d645750808060200190516020811015611d6157600080fd5b50515b611db5576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d6020811015611e3757600080fd5b5051600c546001600160a01b038216158015945091925090611f06578015611f01576000611e7a610f4e6001600160701b0388811690881663ffffffff6117fc16565b90506000611e8783611f1a565b905080821115611efe576000611eb5611ea6848463ffffffff61185f16565b6000549063ffffffff6117fc16565b90506000611eda83611ece86600563ffffffff6117fc16565b9063ffffffff6120ef16565b90506000818381611ee757fe5b0490508015611efa57611efa8782611f6c565b5050505b50505b611f12565b8015611f12576000600c555b505092915050565b60006003821115611f5d575080600160028204015b81811015611f5757809150600281828581611f4657fe5b040181611f4f57fe5b049050611f2f565b50611f67565b8115611f67575060015b919050565b600054611f7f908263ffffffff6120ef16565b60009081556001600160a01b038316815260016020526040902054611faa908263ffffffff6120ef16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120115781612013565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612043908263ffffffff61185f16565b6001600160a01b03831660009081526001602052604081209190915554612070908263ffffffff61185f16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816120e757fe5b049392505050565b80820182811015610bc3576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a723158201a333698d095c3ec678edf8ed4bc5dc060ceb3d8c268e610d38576a80a656b9464736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820edbd0fb9d036efcd1340c657953fc517140cc2432a77cd27d5c4300eec3666cd64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806376cdb03b1161006657806376cdb03b146100fb578063a2e74af614610103578063c9c653961461012b578063e6a4390514610159578063f46901ed1461018757610093565b8063017e7e5814610098578063094b7415146100bc5780631e3dd18b146100c4578063574f2ba3146100e1575b600080fd5b6100a06101ad565b604080516001600160a01b039092168252519081900360200190f35b6100a06101bc565b6100a0600480360360208110156100da57600080fd5b50356101cb565b6100e96101f2565b60408051918252519081900360200190f35b6100a06101f8565b6101296004803603602081101561011957600080fd5b50356001600160a01b0316610207565b005b6100a06004803603604081101561014157600080fd5b506001600160a01b038135811691602001351661027f565b6100a06004803603604081101561016f57600080fd5b506001600160a01b03813581169160200135166105bb565b6101296004803603602081101561019d57600080fd5b50356001600160a01b03166105e1565b6000546001600160a01b031681565b6001546001600160a01b031681565b600481815481106101d857fe5b6000918252602090912001546001600160a01b0316905081565b60045490565b6002546001600160a01b031681565b6001546001600160a01b0316331461025d576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102e8576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061030b57838561030e565b84845b90925090506001600160a01b03821661036e576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156103e1576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b6060604051806020016103f390610659565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56002546040805163c0c53b8b60e01b81526001600160a01b0388811660048301528781166024830152928316604482015290519297509087169163c0c53b8b9160648082019260009290919082900301818387803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610637576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612384806106678339019056fe60806040526001600d5534801561001557600080fd5b5060405146908060526123328239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561222d806101056000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610520578063d505accf14610528578063dd62ed3e14610579578063fff6cae9146105a7576101a9565b8063ba9a7a56146104d8578063c0c53b8b146104e0578063c45a015514610518576101a9565b80637ecebe00116100d35780637ecebe001461043f57806389afcb441461046557806395d89b41146104a4578063a9059cbb146104ac576101a9565b806370a08231146104095780637464fc3d1461042f57806376cdb03b14610437576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb5780635909c0d5146103d35780635a3d5493146103db5780636a627842146103e3576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105af565b005b610244610b62565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b88565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610bb2565b604080519115158252519081900360200190f35b610339610bc9565b604080516001600160a01b039092168252519081900360200190f35b61035d610bd8565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610bde565b61035d610c78565b6103b5610c9c565b6040805160ff9092168252519081900360200190f35b61035d610ca1565b61035d610ca7565b61035d610cad565b61035d600480360360208110156103f957600080fd5b50356001600160a01b0316610cb3565b61035d6004803603602081101561041f57600080fd5b50356001600160a01b031661108a565b61035d61109c565b6103396110a2565b61035d6004803603602081101561045557600080fd5b50356001600160a01b03166110b1565b61048b6004803603602081101561047b57600080fd5b50356001600160a01b03166110c3565b6040805192835260208301919091528051918290030190f35b6102446113f8565b61031d600480360360408110156104c257600080fd5b506001600160a01b03813516906020013561141a565b61035d611427565b61023a600480360360608110156104f657600080fd5b506001600160a01b03813581169160208101358216916040909101351661142d565b6103396114c2565b6103396114d1565b61023a600480360360e081101561053e57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356114e0565b61035d6004803603604081101561058f57600080fd5b506001600160a01b03813581169160200135166116e2565b61023a6116ff565b600d546001146105fa576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d558415158061060d5750600084115b6106485760405162461bcd60e51b815260040180806020018281038252602581526020018061213f6025913960400191505060405180910390fd5b600080610653610b88565b5091509150816001600160701b0316871080156106785750806001600160701b031686105b6106b35760405162461bcd60e51b81526004018080602001828103825260218152602001806121886021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906106f15750806001600160a01b0316896001600160a01b031614155b61073a576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a156107bc576008546040805163bf4d6b0560e01b81523060048201526001600160a01b0385811660248301528c81166044830152606482018f90529151919092169163bf4d6b0591608480830192600092919082900301818387803b1580156107a357600080fd5b505af11580156107b7573d6000803e3d6000fd5b505050505b891561083e576008546040805163bf4d6b0560e01b81523060048201526001600160a01b0384811660248301528c81166044830152606482018e90529151919092169163bf4d6b0591608480830192600092919082900301818387803b15801561082557600080fd5b505af1158015610839573d6000803e3d6000fd5b505050505b86156108f957886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108e057600080fd5b505af11580156108f4573d6000803e3d6000fd5b505050505b6008546040805163e8929f6f60e01b815230600482015281516001600160a01b039093169263e8929f6f92602480840193919291829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d604081101561096b57600080fd5b508051602090910151909450925060009150506001600160701b0385168a900383116109985760006109a7565b89856001600160701b03160383035b9050600089856001600160701b03160383116109c45760006109d3565b89856001600160701b03160383035b905060008211806109e45750600081115b610a1f5760405162461bcd60e51b81526004018080602001828103825260248152602001806121646024913960400191505060405180910390fd5b6000610a53610a3584600363ffffffff6117fc16565b610a47876103e863ffffffff6117fc16565b9063ffffffff61185f16565b90506000610a6b610a3584600363ffffffff6117fc16565b9050610a9c620f4240610a906001600160701b038b8116908b1663ffffffff6117fc16565b9063ffffffff6117fc16565b610aac838363ffffffff6117fc16565b1015610aee576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610afc848488886118af565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610bbf338484611a74565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c63576001600160a01b0384166000908152600260209081526040808320338452909152902054610c3e908363ffffffff61185f16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c6e848484611ad6565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b600a5481565b600b5481565b6000600d54600114610d00576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580610d10610b88565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d6457600080fd5b505afa158015610d78573d6000803e3d6000fd5b505050506040513d6020811015610d8e57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610de157600080fd5b505afa158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b5051600654600854919250610e2d916001600160a01b03918216911684611c22565b600754600854610e4a916001600160a01b03908116911683611c22565b60085460408051630fe04b3360e21b81526001600160a01b038981166004830152306024830152604482018690526064820185905282516000948594921692633f812ccc92608480830193919282900301818787803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b505050506040513d6040811015610ed657600080fd5b50805160209091015190925090506000610eff836001600160701b03891663ffffffff61185f16565b90506000610f1c836001600160701b03891663ffffffff61185f16565b90506000610f2a8989611dbc565b60005490915080610f6757610f536103e8610a47610f4e878763ffffffff6117fc16565b611f1a565b9a50610f6260006103e8611f6c565b610fb6565b610fb36001600160701b038b16610f84868463ffffffff6117fc16565b81610f8b57fe5b046001600160701b038b16610fa6868563ffffffff6117fc16565b81610fad57fe5b04612002565b9a505b60008b11610ff55760405162461bcd60e51b81526004018080602001828103825260288152602001806121d16028913960400191505060405180910390fd5b610fff8c8c611f6c565b61100b86868c8c6118af565b811561103b57600954611037906001600160701b0380821691600160701b90041663ffffffff6117fc16565b600c555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d55509698975050505050505050565b60016020526000908152604090205481565b600c5481565b6008546001600160a01b031681565b60046020526000908152604090205481565b600080600d54600114611111576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611121610b88565b506006546007546008546040805163e8929f6f60e01b815230600482015281519698509496506001600160a01b039384169592841694600094859493169263e8929f6f92602480840193919291829003018186803b15801561118257600080fd5b505afa158015611196573d6000803e3d6000fd5b505050506040513d60408110156111ac57600080fd5b508051602091820151306000908152600190935260408320549194509250906111d58888611dbc565b600054909150806111ec848763ffffffff6117fc16565b816111f357fe5b049a5080611207848663ffffffff6117fc16565b8161120e57fe5b04995060008b118015611221575060008a115b61125c5760405162461bcd60e51b81526004018080602001828103825260288152602001806121a96028913960400191505060405180910390fd5b611266308461201a565b600854604080516311e5803f60e31b81526001600160a01b038f81166004830152306024830152604482018f9052606482018e905291519190921691638f2c01f891608480830192600092919082900301818387803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b50506008546040805163e8929f6f60e01b815230600482015281516001600160a01b03909316945063e8929f6f935060248082019391829003018186803b15801561132657600080fd5b505afa15801561133a573d6000803e3d6000fd5b505050506040513d604081101561135057600080fd5b508051602090910151909550935061136a85858b8b6118af565b811561139a57600954611396906001600160701b0380821691600160701b90041663ffffffff6117fc16565b600c555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610bbf338484611ad6565b6103e881565b6005546001600160a01b03163314611483576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039485166001600160a01b031991821617909155600780549385169382169390931790925560088054919093169116179055565b6005546001600160a01b031681565b6007546001600160a01b031681565b4284101561152a576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611645573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061167b5750886001600160a01b0316816001600160a01b0316145b6116cc576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6116d7898989611a74565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461174a576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d8190556008546040805163e8929f6f60e01b8152306004820152815184936001600160a01b03169263e8929f6f9260248082019391829003018186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d60408110156117c157600080fd5b50805160209091015160095491935091506117f390839083906001600160701b0380821691600160701b9004166118af565b50506001600d55565b60008115806118175750508082028282828161181457fe5b04145b610bc3576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610bc3576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b0384118015906118cd57506001600160701b038311155b611914576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b9004811682039081161580159061194457506001600160701b03841615155b801561195857506001600160701b03831615155b156119c9578063ffffffff1661198685611971866120b8565b6001600160e01b03169063ffffffff6120ca16565b600a80546001600160e01b03929092169290920201905563ffffffff81166119b184611971876120b8565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611aff908263ffffffff61185f16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611b34908263ffffffff6120ef16565b6001600160a01b0383166000818152600160205260409020919091553014611bd25760085460408051630987df0360e01b81523060048201526001600160a01b03868116602483015285811660448301526064820185905291519190921691630987df0391608480830192600092919082900301818387803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b505050505b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611ccf5780518252601f199092019160209182019101611cb0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d31576040519150601f19603f3d011682016040523d82523d6000602084013e611d36565b606091505b5091509150818015611d64575080511580611d645750808060200190516020811015611d6157600080fd5b50515b611db5576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d6020811015611e3757600080fd5b5051600c546001600160a01b038216158015945091925090611f06578015611f01576000611e7a610f4e6001600160701b0388811690881663ffffffff6117fc16565b90506000611e8783611f1a565b905080821115611efe576000611eb5611ea6848463ffffffff61185f16565b6000549063ffffffff6117fc16565b90506000611eda83611ece86600563ffffffff6117fc16565b9063ffffffff6120ef16565b90506000818381611ee757fe5b0490508015611efa57611efa8782611f6c565b5050505b50505b611f12565b8015611f12576000600c555b505092915050565b60006003821115611f5d575080600160028204015b81811015611f5757809150600281828581611f4657fe5b040181611f4f57fe5b049050611f2f565b50611f67565b8115611f67575060015b919050565b600054611f7f908263ffffffff6120ef16565b60009081556001600160a01b038316815260016020526040902054611faa908263ffffffff6120ef16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120115781612013565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612043908263ffffffff61185f16565b6001600160a01b03831660009081526001602052604081209190915554612070908263ffffffff61185f16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816120e757fe5b049392505050565b80820182811015610bc3576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a723158201a333698d095c3ec678edf8ed4bc5dc060ceb3d8c268e610d38576a80a656b9464736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820edbd0fb9d036efcd1340c657953fc517140cc2432a77cd27d5c4300eec3666cd64736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 285,
        "contract": "contracts/v2-core/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 287,
        "contract": "contracts/v2-core/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 289,
        "contract": "contracts/v2-core/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "bank",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 295,
        "contract": "contracts/v2-core/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 298,
        "contract": "contracts/v2-core/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}